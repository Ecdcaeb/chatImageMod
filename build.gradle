buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven {
            name = 'MixinGradle'
            url = 'https://repo.spongepowered.org/repository/maven-public'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '1.6'
group = 'org.eu.hanana.reimu.mc.chatimage' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'chatimage'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    accessTransformer = file('src/main/resources/META-INF/cim_at.cfg')
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'fml.coreMods.load', 'zone.rong.mixinbooter.MixinBooterPlugin,org.eu.hanana.reimu.mc.chatimage.mixininit.EarlyMixinInit'
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'fml.coreMods.load', 'zone.rong.mixinbooter.MixinBooterPlugin,org.eu.hanana.reimu.mc.chatimage.mixininit.EarlyMixinInit'
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
    processResources
            {
                // this will ensure that this task is redone when the versions change.
                inputs.property "version", project.version
                inputs.property "mcversion", "1.12.2"

                // replace stuff in mcmod.info, nothing else
                from(sourceSets.main.resources.srcDirs) {
                    include 'mcmod.info'

                    // replace version and mcversion
                    expand 'version':project.version, 'mcversion':"1.12.2"
                }

                // copy everything else, thats not the mcmod.info
                from(sourceSets.main.resources.srcDirs) {
                    exclude 'mcmod.info'
                }
            }
}
repositories {
    maven {
        url 'https://maven.cleanroommc.com'
    }
}
dependencies {
    implementation fileTree("lib")
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'org.eclipse.jetty.websocket:websocket-server:9.4.44.v20210927'
    // Common:
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'

    // ForgeGradle:
    implementation ('zone.rong:mixinbooter:9.1') {
        transitive = false
    }
    annotationProcessor ('zone.rong:mixinbooter:9.1') {
        transitive = false
    }

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}
sourceSets {
    main {
        output.resourcesDir = output.classesDir
        ext.refMap = "mixins.chatimage.refmap.json"
    }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "chatimage",
            "Specification-Vendor": "hanana",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"hanana",
            'FMLAT': 'cim_at.cfg',
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            //"ContainedDeps": "jelly.jar",
            "Main-Class": "org.eu.hanana.reimu.mc.chatimage.WinRun",
            'FMLCorePluginContainsFMLMod': true,
            //"com.yourname.modid"请换成你自己包名,"mixininit.EarlyMixinInit"具体是什么稍后讲解
            'FMLCorePlugin': 'org.eu.hanana.reimu.mc.chatimage.mixininit.EarlyMixinInit',
            //可能并不合适?但是可以运行
            "ForceLoadAsMod": true,
            "TweakClass"              : "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder"              : 0,
            "MixinConfigs"            : "mixins.chatimage_early.json"
        ])
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
//通用的mixin配置 可以参考其他mixin教程填写 注意不需要在这里填写config,这部分交给mixinbooter
mixin {
    //换成你自己modid 其实这个refmap的名字其他地方也是可以改的
    add sourceSets.main, "mixins.chatimage.refmap.json"
    debug.export = true
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
